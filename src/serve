#!/usr/bin/env python3

import multiprocessing
import os
import signal
import subprocess
import sys
import logging

logging.basicConfig(level=logging.DEBUG, format="[%(asctime)s] %(levelname)s - %(message)s")
logger = logging.getLogger()

threads = multiprocessing.cpu_count()
workers = min(5, threads)

model_server_timeout = os.environ.get("MODEL_SERVER_TIMEOUT", 30)
model_server_workers = int(os.environ.get("MODEL_SERVER_WORKERS", workers))

def sigterm_handler(nginx_pid, gunicorn_pid):
    try:
        logger.info(f"Inference server exiting; nginx pid {nginx_pid} with signal {signal.SIGQUIT}")
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError as e:
        logger.error(f"Error when terminating nginx: {e}")
        pass
    try:
        logger.info(f"Inference server exiting; nginx pid {nginx_pid} with signal {signal.SIGTERM}")
        os.kill(nginx_pid, signal.SIGTERM)
    except OSError as e:
        logger.error(f"Error when terminating nginx: {e}")
        pass
    
    logger.info("Exiting")
    sys.exit(0)

def start_server():
    logger.info(f"Starting inference server with {workers}. Estimated threads: {threads}")

    subprocess.check_call(["ln", "-sf", "/dev/stdout", "/var/log/nginx/access.log"])
    subprocess.check_call(["ln", "-sf", "/dev/stderr", "/var/log/nginx/error.log"])

    nginx = subprocess.Popen(["nginx", "-c", "/opt/ml/nginx.conf"])
    gunicorn = subprocess.Popen([
        "gunicorn",
        "--timeout", str(model_server_timeout),
        "-k", "sync",
        "-b", "unix:/tmp/gunicorn.sock",
        "-w", str(model_server_workers),
        "wsgi:app"
    ])
    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))
    pids = set([nginx.pid, gunicorn.pid])
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    sigterm_handler(nginx.pid, gunicorn.pid)

if __name__ == "__main__":
    start_server()